---
import ArrowLeftIcon from "../../assets/icons/ArrowLeftIcon.astro";
import ArrowRightIcon from "../../assets/icons/ArrowRightIcon.astro";
import CloseIcon from "../../assets/icons/CloseIcon.astro";

const { mobile, desktop } = Astro.props;

// <source media="(min-width : 768px)" srcset={desktop[index]} />
---

<div class="lightbox-carousel closed" data-carousel>
  <div class="close-modal">
    <CloseIcon />
  </div>
  <button data-nav="prev" class="carouselNav prevBtn"><ArrowLeftIcon /></button>
  <div class="image-container">
    {
      mobile?.map((img: string, index: number) => {
        return (
          <picture class="slide" data-position={index}>
            <source media="(max-width : 767px)" srcset={img} />
            <img src={desktop[index]} />
          </picture>
        );
      })
    }
  </div>
  <button class="carouselNav nextBtn" data-nav="next">
    <ArrowRightIcon />
  </button>
</div>
<style lang="scss">
  .lightbox-carousel.closed {
    left: -100%;
  }
  .lightbox-carousel {
    position: fixed;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(1px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
    animation: open 0.3s ease-in 0s 1 normal forwards;

    @keyframes open {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }
  }
  .close-modal {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 15;
    color: var(--accent_color);
  }

  .carouselNav {
    position: absolute;
    top: 50%;
    height: 100%;
    transform: translateY(-50%);
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background-color: transparent;
    color: var(--accent_color);
  }
  .prevBtn {
    left: 0;
  }
  .nextBtn {
    right: 0;
  }
  .image-container {
    position: relative;
    aspect-ratio: 3/5.5;
    height: 80vh;
    max-width: 80%;
    z-index: 20;
    overflow: hidden;
    border-radius: 0.7em;
    @media screen and (min-width: 768px) {
      aspect-ratio: 16/9;
    }
  }
  .slide {
    position: absolute;
    opacity: 0;
    height: 100%;
    width: 100%;
    transition: 0.3s;

    img {
      object-fit: contain;
      height: 100%;
      width: 100%;
    }
  }
  .slide.current {
    opacity: 1;
    transition: opacity 0.3s;
  }
</style>
<script>
  interface Carousel {
    mocks: NodeListOf<Element>;
    close: Element | null;
    container: Element | null;
    nav: NodeListOf<Element> | null;
    slides: NodeListOf<Element> | null;
    index: number;
    prev: () => void;
    next: () => void;
    setSelectors: (event: Event) => void;
    disabledScrollBody: () => void;
    enableScrollBody: () => void;
    showCarousel: () => void;
    hideCarousel: () => void;
    showImage: (image: Element) => void;
    hideImage: (image: Element) => void;
    handleImage: (image: Element) => void;
    handleNav: (btn: Element) => void;
    closeByBtn: (btn: Element) => void;
    init: () => void;
  }
  const body = document.querySelector("body")!;

  const carousel: Carousel = {
    mocks: document.querySelectorAll(".left-side")!,
    close: null,
    container: null,
    nav: null,
    slides: null,
    index: 0,
    prev: function () {
      if (!carousel.slides) {
        return;
      }
      carousel.index === 0
        ? (carousel.index = carousel.slides.length - 1)
        : carousel.index--;
    },
    next: function () {
      if (!carousel.slides) {
        return;
      }
      carousel.index === carousel.slides.length - 1
        ? (carousel.index = 0)
        : carousel.index++;
    },
    setSelectors: function (event) {
      event.currentTarget
        ? (carousel.container = event.currentTarget.parentNode.children[0])
        : "";

      if (carousel.container) {
        carousel.nav = carousel.container.querySelectorAll(".carouselNav");
        carousel.slides = carousel.container.querySelectorAll(".slide");
        carousel.close = carousel.container.querySelector(".close-modal");
      }
    },
    disabledScrollBody: function () {
      body.style.overflow = "hidden";
    },
    enableScrollBody: function () {
      body.style.overflow = "auto";
    },
    showCarousel: function () {
      carousel.container ? carousel.container.classList.remove("closed") : "";
    },
    hideCarousel: function () {
      carousel.container ? carousel.container.classList.add("closed") : "";
    },
    showImage: function (img) {
      img ? img.classList.add("current") : "";
    },
    hideImage: function (img) {
      img.classList.remove("current");
    },
    handleImage: function (img) {
      if (+img.dataset.position === carousel.index) {
        carousel.showImage(img);
      } else {
        carousel.hideImage(img);
      }
    },
    handleNav: function (button) {
      button.dataset.nav === "prev" ? carousel.prev() : carousel.next();
    },
    closeByBtn: function (btn) {
      btn.addEventListener("click", () => {
        carousel.hideCarousel();
        carousel.enableScrollBody();
      });
    },
    init: function () {
      carousel.mocks.forEach((mock) => {
        mock.addEventListener("click", (e) => {
          carousel.setSelectors(e);
          carousel.disabledScrollBody();
          carousel.showCarousel();
          if (!carousel.close) {
            return;
          }
          if (carousel.slides && carousel.nav) {
            carousel.showImage(carousel.slides[0]);
            carousel.nav.forEach((btn) => {
              btn.addEventListener("click", () => {
                carousel.handleNav(btn);
                carousel.slides.forEach((slide) => {
                  carousel.handleImage(slide);
                });
              });
            });
          } else {
            carousel.closeByBtn(carousel.close);
          }
          carousel.closeByBtn(carousel.close);
        });
      });
    },
  };

  carousel.init();
</script>
